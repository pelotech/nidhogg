apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
  name: system
---
apiVersion: v1
kind: Service
metadata:
  name: controller-manager-service
  namespace: system
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
spec:
  selector:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
  ports:
  - port: 443
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      control-plane: controller-manager
      controller-tools.k8s.io: "1.0"
  serviceName: controller-manager-service
  template:
    metadata:
      labels:
        control-plane: controller-manager
        controller-tools.k8s.io: "1.0"
    spec:
      containers:
      - command:
        - /manager
        image: ghcr.io/pelotech/nidhogg:v0.6.4 # x-release-please-version
        imagePullPolicy: IfNotPresent
        name: manager
        args:
        - --config-file=/config/config.json
        - --leader-election
        - --leader-namespace=nidhogg-system
        - --leader-configmap=nidhogg-election
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SECRET_NAME
          value: $(WEBHOOK_SECRET_NAME)
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        ports:
        - containerPort: 9876
          name: webhook-server
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        volumeMounts:
        - mountPath: /tmp/cert
          name: cert
          readOnly: true
        - mountPath: /config
          name: config
          readOnly: true
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-secret
      - name: config
        configMap:
          defaultMode: 420
          name: config
---
apiVersion: v1
kind: Secret
metadata:
  name: webhook-server-secret
  namespace: system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config
  namespace: system
data:
  config.json: |
    {
      "taintNamePrefix": "required.node.taint.prefix.daemonset.tolerations.have.to.start.with",
      "taintRemovalDelayInSeconds": 5,
      "nodeSelector": [
        "path.to.node.selector.where.the.ds.starts"
      ],
      "daemonsets": [
        {
          "name": "daemonset.being.observed",
          "namespace": "namespace"
        }
      ]
    }
